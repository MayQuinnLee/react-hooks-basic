{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/react-hooks-basic/src/components/Ingredients/Ingredients.js\";\nimport React, { useState } from 'react';\nimport IngredientForm from './IngredientForm';\nimport Search from './Search';\nimport IngredientList from './IngredientList';\n\nconst Ingredients = () => {\n  const [ingredients, setIngredients] = useState([]); //browser function, send behind the scene http request. 2nd argument as a object that allows configuration. Firebase understand 'post' method not fetch. JSON is a class which takes stringify function to convert array/object to valid json format - a feature build into the browser. set headers that you want to append to the request. No need to do the same for Axios, because Axios did it for us (stringify & header)\n  //response.json() will extract the response body\n\n  const addIngredientHandler = ingredients => {\n    fetch('https://react-hooks-fae2f.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify(),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      response.json();\n      setIngredients(prevIngredients => [...prevIngredients, {\n        id: response.id,\n        ...ingredients\n      }]);\n    });\n  };\n\n  const removeIngredientHandler = ingredientId => {\n    setIngredients(prevIngredients => prevIngredients.filter(ig => ig.id !== ingredientId));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IngredientForm, {\n    onAddIngredient: addIngredientHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(IngredientList, {\n    ingredients: ingredients,\n    onRemoveItem: removeIngredientHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Ingredients;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/react-hooks-basic/src/components/Ingredients/Ingredients.js"],"names":["React","useState","IngredientForm","Search","IngredientList","Ingredients","ingredients","setIngredients","addIngredientHandler","fetch","method","body","JSON","stringify","headers","then","response","json","prevIngredients","id","removeIngredientHandler","ingredientId","filter","ig"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAE1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C,CAF0B,CAIxB;AACA;;AACF,QAAMO,oBAAoB,GAAGF,WAAW,IAAI;AAC1CG,IAAAA,KAAK,CAAC,2DAAD,EAA8D;AACjEC,MAAAA,MAAM,EAAE,MADyD;AAEjEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,EAF2D;AAGjEC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAHwD,KAA9D,CAAL,CAIGC,IAJH,CAIQC,QAAQ,IAAI;AAClBA,MAAAA,QAAQ,CAACC,IAAT;AACAV,MAAAA,cAAc,CAACW,eAAe,IAAI,CAChC,GAAGA,eAD6B,EAEhC;AAACC,QAAAA,EAAE,EAAEH,QAAQ,CAACG,EAAd;AAAkB,WAAGb;AAArB,OAFgC,CAApB,CAAd;AAKD,KAXD;AAaD,GAdD;;AAgBA,QAAMc,uBAAuB,GAAGC,YAAY,IAAI;AAC9Cd,IAAAA,cAAc,CAACW,eAAe,IAC5BA,eAAe,CAACI,MAAhB,CAAuBC,EAAE,IAAIA,EAAE,CAACJ,EAAH,KAAUE,YAAvC,CADY,CAAd;AAGD,GAJD;;AAME,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAgB,IAAA,eAAe,EAAEb,oBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,cAAD;AACA,IAAA,WAAW,EAAEF,WADb;AAEA,IAAA,YAAY,EAAEc,uBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAHF,CADF;AAYD,CAxCD;;AA0CA,eAAef,WAAf","sourcesContent":["import React, {useState} from 'react';\n\nimport IngredientForm from './IngredientForm';\nimport Search from './Search';\nimport IngredientList from './IngredientList';\n\n\nconst Ingredients = () => {\n\nconst [ingredients, setIngredients] = useState([]);\n\n  //browser function, send behind the scene http request. 2nd argument as a object that allows configuration. Firebase understand 'post' method not fetch. JSON is a class which takes stringify function to convert array/object to valid json format - a feature build into the browser. set headers that you want to append to the request. No need to do the same for Axios, because Axios did it for us (stringify & header)\n  //response.json() will extract the response body\nconst addIngredientHandler = ingredients => {\n  fetch('https://react-hooks-fae2f.firebaseio.com/ingredients.json', { \n    method: 'POST',\n    body: JSON.stringify(),\n    headers: {'Content-Type': 'application/json'} \n  }).then(response => {\n    response.json();\n    setIngredients(prevIngredients => [\n      ...prevIngredients, \n      {id: response.id, ...ingredients}\n    ]);\n\n  })\n\n};\n\nconst removeIngredientHandler = ingredientId => {\n  setIngredients(prevIngredients => \n    prevIngredients.filter(ig => ig.id !== ingredientId)\n  );\n}\n\n  return (\n    <div className=\"App\">\n      <IngredientForm onAddIngredient={addIngredientHandler}/>\n\n      <section>\n        <Search />\n        <IngredientList \n        ingredients={ingredients} \n        onRemoveItem={removeIngredientHandler}/>\n      </section>\n    </div>\n  );\n}\n\nexport default Ingredients;\n"]},"metadata":{},"sourceType":"module"}