{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/react-hooks-basic/src/components/Ingredients/Search.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Card from '../UI/Card';\nimport './Search.css';\nimport useHttp from '../../hooks/http';\nconst {\n  isLoading,\n  data,\n  error,\n  reqExtra,\n  reqIdentifier,\n  sendRequest,\n  clear\n} = useHttp();\nconst Search = React.memo(props => {\n  const {\n    onLoadIngredients\n  } = props; //object destructuring, function is a object, onLoadIngredients as a key \n\n  const [enteredFilter, setEnteredFilter] = useState('');\n  const inputRef = useRef();\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      //is the 'enteredFilter' the same as the 'enteredFilter' 500ms ago? the old 'enteredFilter' will be lock in when we set the timer. 'current' & 'value' property of useRef(). inputRef is defined outside of the closure, not locked in, hence it is the current value\n      if (enteredFilter === inputRef.current.value) {\n        const query = enteredFilter.length === 0 ? '' : `?orderBy=\"title\"&equalTo=\"${enteredFilter}\"`; //to filter the ingredients in the backend, need to fetch backend data\n        //to only fetch information of 'enteredFilter' and not everything\n\n        sendRequest(`https://react-hooks-fae2f.firebaseio.com/ingredients.json${query}`);\n        const loadedIngredients = [];\n\n        for (const key in data) {\n          loadedIngredients.push({\n            id: key,\n            title: data[key].title,\n            amount: data[key].amount\n          });\n        }\n\n        ;\n        onLoadIngredients(loadedIngredients); //infinite loop, as parent will re-render when this function is being re-rendered, since this is a dependencies: solution useCallback() it cached your function for you, so that it survives re-render cycle\n      }\n    }, 500);\n    return () => {\n      clearTimeout(timeout); //useEffect() can return a function, clear-up function will run before the next time the 'above' function runs. hence it will clear all the old timer on every keystroke, leaving the final timer running\n    };\n  }, [enteredFilter, onLoadIngredients, inputRef]);\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, \"Filter by Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputRef //a special property supported by React, to connect useRef() to the DOM\n    ,\n    type: \"text\",\n    value: enteredFilter,\n    onChange: event => setEnteredFilter(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }))));\n});\nexport default Search;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/react-hooks-basic/src/components/Ingredients/Search.js"],"names":["React","useState","useEffect","useRef","Card","useHttp","isLoading","data","error","reqExtra","reqIdentifier","sendRequest","clear","Search","memo","props","onLoadIngredients","enteredFilter","setEnteredFilter","inputRef","timeout","setTimeout","current","value","query","length","loadedIngredients","key","push","id","title","amount","clearTimeout","event","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAkD,OAAlD;AAEA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,cAAP;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,MAAM;AAACC,EAAAA,SAAD;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA,KAAlB;AAAyBC,EAAAA,QAAzB;AAAmCC,EAAAA,aAAnC;AAAkDC,EAAAA,WAAlD;AAA+DC,EAAAA;AAA/D,IAAwEP,OAAO,EAArF;AAEA,MAAMQ,MAAM,GAAGb,KAAK,CAACc,IAAN,CAAWC,KAAK,IAAI;AACjC,QAAM;AAACC,IAAAA;AAAD,MAAsBD,KAA5B,CADiC,CACE;;AACnC,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAMkB,QAAQ,GAAGhB,MAAM,EAAvB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/B;AACA,UAAGJ,aAAa,KAAKE,QAAQ,CAACG,OAAT,CAAiBC,KAAtC,EAA4C;AAC1C,cAAMC,KAAK,GACXP,aAAa,CAACQ,MAAd,KAAuB,CAAvB,GACE,EADF,GAEG,6BAA4BR,aAAc,GAH7C,CAD0C,CAK1C;AACA;;AACAN,QAAAA,WAAW,CAAE,4DAA2Da,KAAM,EAAnE,CAAX;AACA,cAAME,iBAAiB,GAAG,EAA1B;;AACA,aAAK,MAAMC,GAAX,IAAkBpB,IAAlB,EAAuB;AACrBmB,UAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACrBC,YAAAA,EAAE,EAAEF,GADiB;AAErBG,YAAAA,KAAK,EAAEvB,IAAI,CAACoB,GAAD,CAAJ,CAAUG,KAFI;AAGrBC,YAAAA,MAAM,EAAExB,IAAI,CAACoB,GAAD,CAAJ,CAAUI;AAHG,WAAvB;AAKD;;AAAA;AACDf,QAAAA,iBAAiB,CAACU,iBAAD,CAAjB,CAhB0C,CAgBJ;AACvC;AACF,KApByB,EAoBxB,GApBwB,CAA1B;AAqBA,WAAO,MAAM;AACXM,MAAAA,YAAY,CAACZ,OAAD,CAAZ,CADW,CACY;AACxB,KAFD;AAGD,GAzBQ,EAyBP,CAACH,aAAD,EAAgBD,iBAAhB,EAAmCG,QAAnC,CAzBO,CAAT;AA2BA,sBACE;AAAS,IAAA,SAAS,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE;AACA,IAAA,GAAG,EAAEA,QADL,CACe;AADf;AAEA,IAAA,IAAI,EAAC,MAFL;AAGA,IAAA,KAAK,EAAEF,aAHP;AAIA,IAAA,QAAQ,EAAEgB,KAAK,IAAIf,gBAAgB,CAACe,KAAK,CAACC,MAAN,CAAaX,KAAd,CAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF,CADF;AAcD,CA9Cc,CAAf;AAgDA,eAAeV,MAAf","sourcesContent":["import React , {useState, useEffect, useRef} from 'react';\n\nimport Card from '../UI/Card';\nimport './Search.css';\nimport useHttp from '../../hooks/http';\n\nconst {isLoading, data, error, reqExtra, reqIdentifier, sendRequest, clear} = useHttp();\n\nconst Search = React.memo(props => {\n  const {onLoadIngredients} = props; //object destructuring, function is a object, onLoadIngredients as a key \n  const [enteredFilter, setEnteredFilter] = useState('');\n  const inputRef = useRef();\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      //is the 'enteredFilter' the same as the 'enteredFilter' 500ms ago? the old 'enteredFilter' will be lock in when we set the timer. 'current' & 'value' property of useRef(). inputRef is defined outside of the closure, not locked in, hence it is the current value\n      if(enteredFilter === inputRef.current.value){\n        const query = \n        enteredFilter.length===0 \n        ? '' \n        : `?orderBy=\"title\"&equalTo=\"${enteredFilter}\"`\n        //to filter the ingredients in the backend, need to fetch backend data\n        //to only fetch information of 'enteredFilter' and not everything\n        sendRequest(`https://react-hooks-fae2f.firebaseio.com/ingredients.json${query}`);\n        const loadedIngredients = [];\n        for (const key in data){\n          loadedIngredients.push({\n            id: key,\n            title: data[key].title,\n            amount: data[key].amount\n          });\n        };\n        onLoadIngredients(loadedIngredients); //infinite loop, as parent will re-render when this function is being re-rendered, since this is a dependencies: solution useCallback() it cached your function for you, so that it survives re-render cycle\n      }\n    },500);\n    return () => {\n      clearTimeout(timeout); //useEffect() can return a function, clear-up function will run before the next time the 'above' function runs. hence it will clear all the old timer on every keystroke, leaving the final timer running\n    }\n  },[enteredFilter, onLoadIngredients, inputRef])\n\n  return (\n    <section className=\"search\">\n      <Card>\n        <div className=\"search-input\">\n          <label>Filter by Title</label>\n          <input \n          ref={inputRef} //a special property supported by React, to connect useRef() to the DOM\n          type=\"text\"\n          value={enteredFilter}\n          onChange={event => setEnteredFilter(event.target.value)} />\n        </div>\n      </Card>\n    </section>\n  );\n});\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}