{"ast":null,"code":"import { useReducer, useCallback } from 'react'; // outside of functional component, do not need a re-render on every call\n\nconst httpReducer = (curHttpState, action) => {\n  switch (action.type) {\n    case 'SEND':\n      return {\n        loading: true,\n        error: null,\n        data: null\n      };\n\n    case 'RESPONSE':\n      return { ...curHttpState,\n        loading: false,\n        data: action.responseData\n      };\n\n    case 'ERROR':\n      return {\n        loading: false,\n        error: action.errorMessage\n      };\n\n    case 'CLEAR':\n      return {\n        error: null\n      };\n\n    default:\n      throw new Error('You should not get here');\n  }\n}; //you can use stateful/ any hooks feature in this custom hook\n\n\nconst useHttp = () => {\n  const [httpState, dispatchHttp] = useReducer(httpReducer, {\n    loading: false,\n    error: null,\n    data: null\n  }); // to avoid http request from re-rending on every functional component call, create a new function for http request, only then when the function is call, the code will run\n\n  const sendRequest = useCallback((url, method, body) => {\n    dispatchHttp({\n      type: 'SEND'\n    });\n    fetch(url, {\n      method: method,\n      body: body,\n      header: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(responseData => {\n      dispatchHttp({\n        type: 'RESPONSE',\n        responseData: responseData\n      });\n    }).catch(err => {\n      dispatchHttp({\n        type: 'ERROR',\n        errorMessage: err.message\n      });\n    });\n  }, []);\n  return {\n    isLoading: httpState.loading,\n    error: httpState.error,\n    data: httpState.data,\n    sendRequest: sendRequest\n  };\n}; //all hooks can return something\n\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/react-hooks-basic/src/hooks/http.js"],"names":["useReducer","useCallback","httpReducer","curHttpState","action","type","loading","error","data","responseData","errorMessage","Error","useHttp","httpState","dispatchHttp","sendRequest","url","method","body","fetch","header","then","response","json","catch","err","message","isLoading"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,WAApB,QAAsC,OAAtC,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAACC,YAAD,EAAeC,MAAf,KAA0B;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,MAAL;AACE,aAAO;AAACC,QAAAA,OAAO,EAAE,IAAV;AAAgBC,QAAAA,KAAK,EAAE,IAAvB;AAA6BC,QAAAA,IAAI,EAAE;AAAnC,OAAP;;AACF,SAAK,UAAL;AACE,aAAO,EAAC,GAAGL,YAAJ;AAAkBG,QAAAA,OAAO,EAAE,KAA3B;AAAkCE,QAAAA,IAAI,EAAEJ,MAAM,CAACK;AAA/C,OAAP;;AACF,SAAK,OAAL;AACE,aAAO;AAACH,QAAAA,OAAO,EAAE,KAAV;AAAiBC,QAAAA,KAAK,EAAEH,MAAM,CAACM;AAA/B,OAAP;;AACF,SAAK,OAAL;AACE,aAAM;AAACH,QAAAA,KAAK,EAAE;AAAR,OAAN;;AACF;AAAS,YAAM,IAAII,KAAJ,CAAU,yBAAV,CAAN;AATX;AAWD,CAZH,C,CAcA;;;AACA,MAAMC,OAAO,GAAG,MAAM;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,UAAU,CAACE,WAAD,EAAc;AACtDI,IAAAA,OAAO,EAAE,KAD6C;AACtCC,IAAAA,KAAK,EAAE,IAD+B;AACzBC,IAAAA,IAAI,EAAE;AADmB,GAAd,CAA5C,CADkB,CAKlB;;AACA,QAAMO,WAAW,GAAGd,WAAW,CAAC,CAACe,GAAD,EAAMC,MAAN,EAAcC,IAAd,KAAuB;AACnDJ,IAAAA,YAAY,CAAC;AAACT,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAZ;AACAc,IAAAA,KAAK,CAACH,GAAD,EAAM;AACXC,MAAAA,MAAM,EAAEA,MADG;AAEXC,MAAAA,IAAI,EAAEA,IAFK;AAGXE,MAAAA,MAAM,EAAE;AAAC,wBAAgB;AAAjB;AAHG,KAAN,CAAL,CAIGC,IAJH,CAIQC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAND,EAMGF,IANH,CAMQZ,YAAY,IAAG;AACnBK,MAAAA,YAAY,CAAC;AAACT,QAAAA,IAAI,EAAE,UAAP;AAAmBI,QAAAA,YAAY,EAAEA;AAAjC,OAAD,CAAZ;AACH,KARD,EAQGe,KARH,CAQSC,GAAG,IAAG;AACXX,MAAAA,YAAY,CAAC;AAACT,QAAAA,IAAI,EAAC,OAAN;AAAeK,QAAAA,YAAY,EAACe,GAAG,CAACC;AAAhC,OAAD,CAAZ;AACH,KAVD;AAWH,GAb8B,EAa5B,EAb4B,CAA/B;AAeA,SAAO;AACHC,IAAAA,SAAS,EAAEd,SAAS,CAACP,OADlB;AAEHC,IAAAA,KAAK,EAAEM,SAAS,CAACN,KAFd;AAGHC,IAAAA,IAAI,EAAEK,SAAS,CAACL,IAHb;AAIHO,IAAAA,WAAW,EAAEA;AAJV,GAAP;AAMH,CA3BD,C,CA6BI;;;AACJ,eAAeH,OAAf","sourcesContent":["import {useReducer, useCallback} from 'react';\n\n// outside of functional component, do not need a re-render on every call\nconst httpReducer = (curHttpState, action) => {\n    switch(action.type){\n      case 'SEND':\n        return {loading: true, error: null, data: null};\n      case 'RESPONSE':\n        return {...curHttpState, loading: false, data: action.responseData};\n      case 'ERROR': \n        return {loading: false, error: action.errorMessage};\n      case 'CLEAR':\n        return{error: null};\n      default: throw new Error('You should not get here')\n    }\n  }\n\n//you can use stateful/ any hooks feature in this custom hook\nconst useHttp = () => {\n    const [httpState, dispatchHttp] = useReducer(httpReducer, {\n        loading: false, error: null, data: null});\n\n\n    // to avoid http request from re-rending on every functional component call, create a new function for http request, only then when the function is call, the code will run\n    const sendRequest = useCallback((url, method, body) => {\n        dispatchHttp({type: 'SEND'});\n        fetch(url, { \n        method: method,\n        body: body,\n        header: {'Content-Type': 'application/json'}\n        }).then(response => {\n            return response.json()\n        }).then(responseData=> {\n            dispatchHttp({type: 'RESPONSE', responseData: responseData});\n        }).catch(err=> {\n            dispatchHttp({type:'ERROR', errorMessage:err.message});\n        })\n    } ,[]);\n    \n    return {\n        isLoading: httpState.loading,\n        error: httpState.error,\n        data: httpState.data,\n        sendRequest: sendRequest\n    };\n};\n\n    //all hooks can return something\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}