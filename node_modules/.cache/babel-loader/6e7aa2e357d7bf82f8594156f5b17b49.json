{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/react-hooks-basic/src/components/Ingredients/Search.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Card from '../UI/Card';\nimport './Search.css';\nimport useHttp from '../../hooks/http';\nimport ErrorModal from '../UI/ErrorModal';\nconst Search = React.memo(props => {\n  const {\n    onLoadIngredients\n  } = props; //object destructuring, function is a object, onLoadIngredients as a key \n\n  const [enteredFilter, setEnteredFilter] = useState('');\n  const inputRef = useRef();\n  const {\n    isLoading,\n    data,\n    error,\n    sendRequest,\n    clear\n  } = useHttp();\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      //is the 'enteredFilter' the same as the 'enteredFilter' 500ms ago? the old 'enteredFilter' will be lock in when we set the timer. 'current' & 'value' property of useRef(). inputRef is defined outside of the closure, not locked in, hence it is the current value\n      if (enteredFilter === inputRef.current.value) {\n        const query = enteredFilter.length === 0 ? '' : `?orderBy=\"title\"&equalTo=\"${enteredFilter}\"`; //to filter the ingredients in the backend, need to fetch backend data\n        //to only fetch information of 'enteredFilter' and not everything\n\n        sendRequest(`https://react-hooks-fae2f.firebaseio.com/ingredients.json${query}`, 'GET');\n      }\n    }, 500);\n    return () => {\n      clearTimeout(timeout); //useEffect() can return a function, clear-up function will run before the next time the 'above' function runs. hence it will clear all the old timer on every keystroke, leaving the final timer running\n    };\n  }, [enteredFilter, inputRef, sendRequest]);\n  useEffect(() => {\n    if (!isLoading && !error && data) {\n      const loadedIngredients = [];\n\n      for (const key in data) {\n        loadedIngredients.push({\n          id: key,\n          title: data[key].title,\n          amount: data[key].amount\n        });\n      }\n\n      onLoadIngredients(loadedIngredients); //infinite loop, as parent will re-render when this function is being re-rendered, since this is a dependencies: solution useCallback() in parent it cached your function for you, so that it survives re-render cycle\n    }\n  }, [isLoading, error, data, onLoadIngredients]);\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, error && /*#__PURE__*/React.createElement(ErrorModal, {\n    onClose: clear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, \" \", error, \" \"), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, \"Filter by Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputRef //a special property supported by React, to connect useRef() to the DOM\n    ,\n    type: \"text\",\n    value: enteredFilter,\n    onChange: event => setEnteredFilter(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }))));\n});\nexport default Search;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/react-hooks-basic/src/components/Ingredients/Search.js"],"names":["React","useState","useEffect","useRef","Card","useHttp","ErrorModal","Search","memo","props","onLoadIngredients","enteredFilter","setEnteredFilter","inputRef","isLoading","data","error","sendRequest","clear","timeout","setTimeout","current","value","query","length","clearTimeout","loadedIngredients","key","push","id","title","amount","event","target"],"mappings":"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","sourcesContent":["import React , {useState, useEffect, useRef} from 'react';\n\nimport Card from '../UI/Card';\nimport './Search.css';\nimport useHttp from '../../hooks/http';\nimport ErrorModal from '../UI/ErrorModal';\n\nconst Search = React.memo(props => {\n  const {onLoadIngredients} = props; //object destructuring, function is a object, onLoadIngredients as a key \n  const [enteredFilter, setEnteredFilter] = useState('');\n  const inputRef = useRef();\n  const {isLoading, data, error, sendRequest, clear} = useHttp();\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      //is the 'enteredFilter' the same as the 'enteredFilter' 500ms ago? the old 'enteredFilter' will be lock in when we set the timer. 'current' & 'value' property of useRef(). inputRef is defined outside of the closure, not locked in, hence it is the current value\n      if(enteredFilter === inputRef.current.value){\n        const query = \n        enteredFilter.length===0 \n        ? '' \n        : `?orderBy=\"title\"&equalTo=\"${enteredFilter}\"`\n        //to filter the ingredients in the backend, need to fetch backend data\n        //to only fetch information of 'enteredFilter' and not everything\n        sendRequest(`https://react-hooks-fae2f.firebaseio.com/ingredients.json${query}`, 'GET');\n      }\n    },500);\n    return () => {\n      clearTimeout(timeout); //useEffect() can return a function, clear-up function will run before the next time the 'above' function runs. hence it will clear all the old timer on every keystroke, leaving the final timer running\n    }\n  },[enteredFilter, inputRef, sendRequest])\n\n  useEffect(() => {\n    if(!isLoading && !error && data){\n      const loadedIngredients = [];\n      for (const key in data){\n        loadedIngredients.push({\n          id: key,\n          title: data[key].title,\n          amount: data[key].amount\n        });\n      }\n      onLoadIngredients(loadedIngredients); //infinite loop, as parent will re-render when this function is being re-rendered, since this is a dependencies: solution useCallback() in parent it cached your function for you, so that it survives re-render cycle\n    }\n  }, [isLoading, error, data, onLoadIngredients])\n  \n\n  return (\n    <section className=\"search\">\n      {error && <ErrorModal onClose={clear}> {error} </ErrorModal> }\n      <Card>\n        <div className=\"search-input\">\n          <label>Filter by Title</label>\n          <input \n          ref={inputRef} //a special property supported by React, to connect useRef() to the DOM\n          type=\"text\"\n          value={enteredFilter}\n          onChange={event => setEnteredFilter(event.target.value)} />\n        </div>\n      </Card>\n    </section>\n  );\n});\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}