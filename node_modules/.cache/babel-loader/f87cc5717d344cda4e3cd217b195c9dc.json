{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/react-hooks-basic/src/components/Ingredients/Search.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Card from '../UI/Card';\nimport './Search.css';\nconst Search = React.memo(props => {\n  const {\n    onLoadIngredients\n  } = props; //object destructuring, function is a object, onLoadIngredients as a key \n\n  const [enteredFilter, setEnteredFilter] = useState('');\n  const inputRef = useRef();\n  useEffect(() => {\n    setTimeout(() => {\n      //is the 'enteredFilter' the same as the 'enteredFilter' 500ms ago? the old 'enteredFilter' will be lock in when we set the timer. 'current' & 'value' property of useRef(). inputRef is defined outside of the closure, not locked in, hence it is the current value\n      if (enteredFilter === inputRef.current.value) {\n        const query = enteredFilter.length === 0 ? '' : `?orderBy=\"title\"&equalTo=\"${enteredFilter}\"`; //to filter the ingredients in the backend, need to fetch backend data\n        //to only fetch information of 'enteredFilter' and not everything\n\n        fetch('https://react-hooks-fae2f.firebaseio.com/ingredients.json' + query).then(response => response.json()).then(responseData => {\n          const loadedIngredients = [];\n\n          for (const key in responseData) {\n            loadedIngredients.push({\n              id: key,\n              title: responseData[key].title,\n              amount: responseData[key].amount\n            });\n          }\n\n          onLoadIngredients(loadedIngredients); //infinite loop, as parent will re-render when this function is being re-rendered, since this is a dependencies: solution useCallback() it cached your function for you, so that it survives re-render cycle\n        });\n      }\n    }, 500);\n  }, [enteredFilter, onLoadIngredients, inputRef]);\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"Filter by Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputRef //a special property supported by React, to connect useRef() to the DOM\n    ,\n    type: \"text\",\n    value: enteredFilter,\n    onChange: event => setEnteredFilter(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }))));\n});\nexport default Search;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/react-hooks-basic/src/components/Ingredients/Search.js"],"names":["React","useState","useEffect","useRef","Card","Search","memo","props","onLoadIngredients","enteredFilter","setEnteredFilter","inputRef","setTimeout","current","value","query","length","fetch","then","response","json","responseData","loadedIngredients","key","push","id","title","amount","event","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAkD,OAAlD;AAEA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,cAAP;AAEA,MAAMC,MAAM,GAAGL,KAAK,CAACM,IAAN,CAAWC,KAAK,IAAI;AACjC,QAAM;AAACC,IAAAA;AAAD,MAAsBD,KAA5B,CADiC,CACE;;AACnC,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAMU,QAAQ,GAAGR,MAAM,EAAvB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,UAAU,CAAC,MAAM;AACf;AACA,UAAGH,aAAa,KAAKE,QAAQ,CAACE,OAAT,CAAiBC,KAAtC,EAA4C;AAC1C,cAAMC,KAAK,GACXN,aAAa,CAACO,MAAd,KAAuB,CAAvB,GACE,EADF,GAEG,6BAA4BP,aAAc,GAH7C,CAD0C,CAK1C;AACA;;AACAQ,QAAAA,KAAK,CAAC,8DAA8DF,KAA/D,CAAL,CACCG,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,YAAY,IAAI;AACpB,gBAAMC,iBAAiB,GAAG,EAA1B;;AACA,eAAK,MAAMC,GAAX,IAAkBF,YAAlB,EAA+B;AAC7BC,YAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACrBC,cAAAA,EAAE,EAAEF,GADiB;AAErBG,cAAAA,KAAK,EAAEL,YAAY,CAACE,GAAD,CAAZ,CAAkBG,KAFJ;AAGrBC,cAAAA,MAAM,EAAEN,YAAY,CAACE,GAAD,CAAZ,CAAkBI;AAHL,aAAvB;AAKD;;AACDnB,UAAAA,iBAAiB,CAACc,iBAAD,CAAjB,CAToB,CASkB;AACvC,SAZD;AAaD;AACF,KAvBS,EAuBR,GAvBQ,CAAV;AAwBD,GAzBQ,EAyBP,CAACb,aAAD,EAAgBD,iBAAhB,EAAmCG,QAAnC,CAzBO,CAAT;AA2BA,sBACE;AAAS,IAAA,SAAS,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE;AACA,IAAA,GAAG,EAAEA,QADL,CACe;AADf;AAEA,IAAA,IAAI,EAAC,MAFL;AAGA,IAAA,KAAK,EAAEF,aAHP;AAIA,IAAA,QAAQ,EAAEmB,KAAK,IAAIlB,gBAAgB,CAACkB,KAAK,CAACC,MAAN,CAAaf,KAAd,CAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF,CADF;AAcD,CA9Cc,CAAf;AAgDA,eAAeT,MAAf","sourcesContent":["import React , {useState, useEffect, useRef} from 'react';\n\nimport Card from '../UI/Card';\nimport './Search.css';\n\nconst Search = React.memo(props => {\n  const {onLoadIngredients} = props; //object destructuring, function is a object, onLoadIngredients as a key \n  const [enteredFilter, setEnteredFilter] = useState('');\n  const inputRef = useRef();\n\n  useEffect(() => {\n    setTimeout(() => {\n      //is the 'enteredFilter' the same as the 'enteredFilter' 500ms ago? the old 'enteredFilter' will be lock in when we set the timer. 'current' & 'value' property of useRef(). inputRef is defined outside of the closure, not locked in, hence it is the current value\n      if(enteredFilter === inputRef.current.value){\n        const query = \n        enteredFilter.length===0 \n        ? '' \n        : `?orderBy=\"title\"&equalTo=\"${enteredFilter}\"`\n        //to filter the ingredients in the backend, need to fetch backend data\n        //to only fetch information of 'enteredFilter' and not everything\n        fetch('https://react-hooks-fae2f.firebaseio.com/ingredients.json' + query)\n        .then(response => response.json())\n        .then(responseData => {\n          const loadedIngredients = [];\n          for (const key in responseData){\n            loadedIngredients.push({\n              id: key,\n              title: responseData[key].title,\n              amount: responseData[key].amount\n            });\n          }\n          onLoadIngredients(loadedIngredients); //infinite loop, as parent will re-render when this function is being re-rendered, since this is a dependencies: solution useCallback() it cached your function for you, so that it survives re-render cycle\n        })\n      }\n    },500);\n  },[enteredFilter, onLoadIngredients, inputRef])\n\n  return (\n    <section className=\"search\">\n      <Card>\n        <div className=\"search-input\">\n          <label>Filter by Title</label>\n          <input \n          ref={inputRef} //a special property supported by React, to connect useRef() to the DOM\n          type=\"text\"\n          value={enteredFilter}\n          onChange={event => setEnteredFilter(event.target.value)} />\n        </div>\n      </Card>\n    </section>\n  );\n});\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}