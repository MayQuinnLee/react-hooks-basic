{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/react-hooks-basic/src/components/Ingredients/Ingredients.js\";\nimport React, { useReducer, useEffect, useCallback } from 'react';\nimport IngredientForm from './IngredientForm';\nimport Search from './Search';\nimport IngredientList from './IngredientList';\nimport ErrorModal from '../UI/ErrorModal';\nimport useHttp from '../../hooks/http';\n\nconst ingredientReducer = (ingredients\n/*state*/\n, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients;\n\n    case 'ADD':\n      return [...ingredients, action.ingredient];\n\n    case 'DELETE':\n      return ingredients.filter(ing => ing.id !== action.id);\n\n    default:\n      throw new Error('This should not be here');\n  }\n};\n\nconst Ingredients = () => {\n  const [ingredients, dispatch] = useReducer(ingredientReducer, []); //dispatch: you can name it wtv you want, it is a function that you can call\n  //2nd argument: initial state\n  // const [ingredients, setIngredients] = useState([]);\n  // const [isLoading, setIsLoading] =useState(false);\n  // const [error, setError] = useState();\n\n  const {\n    isLoading,\n    error,\n    data,\n    sendRequest\n  } = useHttp(); //does not send request, only set up the state and function, returns our object\n\n  useEffect(() => {\n    console.log('RENDERING INGREDIENTS', ingredients);\n  }, [ingredients]);\n  const filteredIngredientsHandler = useCallback(ingredient => {\n    dispatch({\n      type: 'SET',\n      ingredients: ingredient\n    }); // setIngredients(ingredient)\n  }, []); //browser function, send behind the scene http request. 2nd argument as a object that allows configuration. Firebase understand 'post' method not fetch. JSON is a class which takes stringify function to convert array/object to valid json format - a feature build into the browser. set headers that you want to append to the request. No need to do the same for Axios, because Axios did it for us (stringify & header)\n  //response.json() will extract the response body, responseData will be return when the body has been extracted. ResponseData will be an object\n\n  const addIngredientHandler = useCallback(ingredient => {\n    // dispatchHttp({type: 'SEND'});\n    fetch('https://react-hooks-fae2f.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify(ingredient),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      // dispatchHttp({type: 'RESPONSE'});\n      return response.json();\n    }).then(responseData => {\n      dispatch({\n        type: 'ADD',\n        ingredient: {\n          id: responseData.name,\n          ...ingredient\n        }\n      }); // setIngredients(prevIngredients => [\n      //   ...prevIngredients, \n      //   {id: responseData.name, ...ingredient}\n      // ]);\n    });\n  }, []); //no dependency as it does not depend on any external function other than http request (which is already guaranteed a promise by react). Since the function will not change there is no need to rerender it at every render cycle, hence we use callback\n\n  const removeIngredientHandler = useCallback(ingredientId => {\n    sendRequest(`https://react-hooks-fae2f.firebaseio.com/ingredients/${ingredientId}.json`, 'DELETE');\n  }, [sendRequest]);\n\n  const clearError = () => {// dispatchHttp({type:'CLEAR'});\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, error && /*#__PURE__*/React.createElement(ErrorModal, {\n    onClose: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, \" \", error, \" \"), /*#__PURE__*/React.createElement(IngredientForm, {\n    onAddIngredient: addIngredientHandler,\n    loading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    onLoadIngredients: filteredIngredientsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(IngredientList, {\n    ingredients: ingredients,\n    onRemoveItem: removeIngredientHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Ingredients;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/react-hooks-basic/src/components/Ingredients/Ingredients.js"],"names":["React","useReducer","useEffect","useCallback","IngredientForm","Search","IngredientList","ErrorModal","useHttp","ingredientReducer","ingredients","action","type","ingredient","filter","ing","id","Error","Ingredients","dispatch","isLoading","error","data","sendRequest","console","log","filteredIngredientsHandler","addIngredientHandler","fetch","method","body","JSON","stringify","headers","then","response","json","responseData","name","removeIngredientHandler","ingredientId","clearError"],"mappings":"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","sourcesContent":["import React, {useReducer, useEffect, useCallback} from 'react';\n\nimport IngredientForm from './IngredientForm';\nimport Search from './Search';\nimport IngredientList from './IngredientList';\nimport ErrorModal from '../UI/ErrorModal';\nimport useHttp from '../../hooks/http';\n\nconst ingredientReducer = (ingredients /*state*/, action) => {\n  switch(action.type){\n    case 'SET':\n      return action.ingredients;\n    case 'ADD':\n      return [...ingredients, action.ingredient];\n    case 'DELETE':\n      return ingredients.filter(ing => ing.id !== action.id);\n    default: \n      throw new Error('This should not be here');\n  }\n};\n\n\nconst Ingredients = () => {\n  const [ingredients, dispatch] = useReducer(ingredientReducer, []);\n  //dispatch: you can name it wtv you want, it is a function that you can call\n  //2nd argument: initial state\n  // const [ingredients, setIngredients] = useState([]);\n  // const [isLoading, setIsLoading] =useState(false);\n  // const [error, setError] = useState();\n   const {isLoading, error, data, sendRequest} = useHttp(); \n  //does not send request, only set up the state and function, returns our object\n\n\n  useEffect(() => {\n    console.log('RENDERING INGREDIENTS', ingredients);\n  }, [ingredients]);\n\n  const filteredIngredientsHandler = useCallback(ingredient => {\n    dispatch({\n      type: 'SET',\n      ingredients: ingredient\n    })\n    // setIngredients(ingredient)\n  }, []);\n\n    //browser function, send behind the scene http request. 2nd argument as a object that allows configuration. Firebase understand 'post' method not fetch. JSON is a class which takes stringify function to convert array/object to valid json format - a feature build into the browser. set headers that you want to append to the request. No need to do the same for Axios, because Axios did it for us (stringify & header)\n    //response.json() will extract the response body, responseData will be return when the body has been extracted. ResponseData will be an object\n  const addIngredientHandler = useCallback(ingredient => {\n    // dispatchHttp({type: 'SEND'});\n    fetch('https://react-hooks-fae2f.firebaseio.com/ingredients.json', { \n      method: 'POST',\n      body: JSON.stringify(ingredient),\n      headers: {'Content-Type': 'application/json'} \n    }).then(response => {\n      // dispatchHttp({type: 'RESPONSE'});\n      return response.json();\n    }).then(responseData => {\n      dispatch({ type: 'ADD', ingredient: {id: responseData.name, ...ingredient}})\n      // setIngredients(prevIngredients => [\n      //   ...prevIngredients, \n      //   {id: responseData.name, ...ingredient}\n      // ]);\n    })\n  },[]); //no dependency as it does not depend on any external function other than http request (which is already guaranteed a promise by react). Since the function will not change there is no need to rerender it at every render cycle, hence we use callback\n\n  const removeIngredientHandler = useCallback(ingredientId => {\n    sendRequest(`https://react-hooks-fae2f.firebaseio.com/ingredients/${ingredientId}.json`, 'DELETE');\n  },[sendRequest]);\n\n  const clearError = () => {\n    // dispatchHttp({type:'CLEAR'});\n  };\n\n  return (\n    <div className=\"App\">\n      {error && <ErrorModal onClose={clearError}> {error} </ErrorModal>}\n      <IngredientForm \n      onAddIngredient={addIngredientHandler}\n      loading={isLoading}/>\n\n      <section>\n        <Search onLoadIngredients={filteredIngredientsHandler} />\n        <IngredientList \n        ingredients={ingredients} \n        onRemoveItem={removeIngredientHandler}/>\n      </section>\n    </div>\n  );\n}\n\nexport default Ingredients;\n"]},"metadata":{},"sourceType":"module"}